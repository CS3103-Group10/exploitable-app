import React, { useState, useEffect } from "react";
import Link from "next/link";
import {
  Typography,
  Table,
  Statistic,
  Card,
  Row,
  Space,
  Button,
  Divider,
  Modal,
} from "antd";

import { useAuth } from "src/hooks";
import {
  getFloraUserProducts,
  getFloraProducts,
  getFloraUser,
  Route,
} from "src/utils";
import { Product, AsivPaymentUrlRequest } from "src/types";

const { Title } = Typography;

type ProductsTableData = Product & {
  key: number;
};

const tableColumns = [
  { title: "Product ID", dataIndex: "pid" },
  { title: "Product Name", dataIndex: "pname" },
  { title: "Product Cost", dataIndex: "pcost" },
];

const FloraIndexPage = (): JSX.Element => {
  const {
    isAuthenticated,
    token,
    user,
    setUser,
    products,
    setProducts,
  } = useAuth();
  const [floraProductsTableData, setFloraProductsTableData] = useState<
    ProductsTableData[]
  >([]);
  const userProductsTableData: ProductsTableData[] = products
    ? products.map((product) => Object.assign({ key: product.pid }, product))
    : [];
  const [
    selectedProduct,
    setSelectedProduct,
  ] = useState<ProductsTableData | null>(null);

  useEffect(() => {
    (async () => {
      const floraProducts = await getFloraProducts();
      const floraProductsTableData = floraProducts.map((product) =>
        Object.assign({ key: product.pid }, product),
      );
      setFloraProductsTableData(floraProductsTableData);
    })();
  }, []);

  async function onRefreshClick() {
    if (!user || !token) {
      return;
    }
    const [updatedUser, updatedProducts] = await Promise.all([
      getFloraUser(token),
      getFloraUserProducts(user.uid, token),
    ]);
    setUser(updatedUser);
    setProducts(updatedProducts);
  }

  async function onBuyClick() {
    if (!user || !selectedProduct) {
      return;
    }

    if (selectedProduct.pcost > user.ucredits) {
      Modal.error({
        title: "You do not have enough credits",
      });
      return;
    }

    Modal.confirm({
      title: `Do you want to buy ${selectedProduct.pname}?`,
      content:
        "Upon confirmation, you will be redirected to Asiv, our payments partner. Please remember to refresh your data once the payment is successful.",
      okText: "Confirm",
      async onOk() {
        const req: AsivPaymentUrlRequest = {
          API_KEY: "4sIV_4PI_k3y",
          uid: user.uid,
          pid: selectedProduct.pid,
          pcost: selectedProduct.pcost,
        };
        const res = await fetch(Route.ASIV_PAYMENTS_REQUEST, {
          method: "POST",
          body: JSON.stringify(req),
          headers: {
            "Content-Type": "application/json",
          },
        });

        const data = await res.json();

        if (!res.ok) {
          throw new Error(data.error);
        }

        window.open(data.url, "_blank", "noopener,noreferrer");
      },
    });
  }

  return (
    <div style={{ maxWidth: "1000px", margin: "auto" }}>
      <Title>Flora Shop</Title>
      <Card>
        {user ? (
          <>
            <Row justify="space-between" align="middle">
              <Space size="large">
                <Statistic
                  title="Products Owned"
                  value={userProductsTableData.length}
                />
                <Statistic title="Available Credits" value={user.ucredits} />
              </Space>
              <Button size="large" onClick={onRefreshClick} type="primary">
                Refresh
              </Button>
            </Row>

            <Table
              bordered
              size="small"
              dataSource={userProductsTableData}
              columns={tableColumns}
            ></Table>
          </>
        ) : (
          <Row justify="center">
            <Button type="primary">
              <Link href="/flora/login">Login to continue</Link>
            </Button>
          </Row>
        )}

        <Divider></Divider>

        <Row style={{ marginBottom: "12px" }} justify="end">
          <Button
            disabled={!isAuthenticated || !selectedProduct}
            onClick={onBuyClick}
            size="large"
            type="primary"
          >
            Buy Product
          </Button>
        </Row>
        <Table
          rowSelection={{
            type: "radio",
            onSelect: (row) => setSelectedProduct(row),
          }}
          bordered
          size="small"
          dataSource={floraProductsTableData}
          columns={tableColumns}
        ></Table>
      </Card>
    </div>
  );
};

export default FloraIndexPage;
