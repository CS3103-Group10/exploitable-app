import React, {
  useState,
  useContext,
  createContext,
  FC,
  useEffect,
} from "react";
import { useRouter } from "next/router";

import { User, FloraLoginRequest } from "src/types";
import { floraLogin, getFloraUser } from "src/utils";

type AuthContext = {
  token: string | null;
  user: User | null;
  isAuthenticated: boolean;
  login: (req: FloraLoginRequest) => Promise<User>;
  logout: () => Promise<void>;
};

type AuthProviderProps = {
  children: React.ReactNode;
};

const authContext = createContext<AuthContext>({} as AuthContext);

export const AuthProvider: FC<AuthProviderProps> = ({ children }) => {
  const [token, setToken] = useState<string | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const router = useRouter();

  async function login(req: FloraLoginRequest): Promise<User> {
    const { token } = await floraLogin(req);
    const floraUser: User = await getFloraUser(token);

    localStorage.setItem("token", token);
    setToken(token);
    setUser(floraUser);
    setIsAuthenticated(true);
    router.push("/flora");

    return floraUser;
  }

  async function logout(): Promise<void> {
    localStorage.removeItem("token");
    setToken(null);
    setUser(null);
    setIsAuthenticated(false);
    router.push("/flora");
  }

  useEffect(() => {
    (async () => {
      const token: string | null = localStorage.getItem("token");
      if (!token) {
        return;
      }

      const floraUser: User = await getFloraUser(token);
      setToken(token);
      setUser(floraUser);
      setIsAuthenticated(true);
    })();
  }, []); // only once runs on mount

  return (
    <authContext.Provider
      value={{ token, user, isAuthenticated, login, logout }}
    >
      {children}
    </authContext.Provider>
  );
};

export const useAuth = (): AuthContext => {
  return useContext<AuthContext>(authContext);
};
