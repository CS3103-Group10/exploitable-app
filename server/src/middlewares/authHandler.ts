import jwt from "jsonwebtoken";
import { Request, Response, NextFunction } from "express";

import { HttpStatusCode, JWT_SECRET_KEY } from "./../utils";
import { ApiError, ApiErrorMessage } from "../errors";
import { User } from "../models";

/**
 * Middleware for authenticated routes. This middleware will decode the `User`
 * from the provided token in the request headers, and store it in `res.locals`.
 * If no token is provided, or if the token is invalid, an `ApiError` will be
 * thrown with a HTTP 401 UNAUTHORIZED error. If this function succeeds without
 * throwing errors, `res.locals` is guaranteed to have the valid `User`.
 */
export async function verifyJwt(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<unknown> {
  const bearerHeader: string | undefined = req.headers.authorization;

  if (!bearerHeader) {
    throw new ApiError(
      HttpStatusCode.UNAUTHORIZED,
      ApiErrorMessage.Auth.AUTHENTICATION_FAILED
    );
  }

  if (!bearerHeader.startsWith("Bearer ")) {
    throw new ApiError(
      HttpStatusCode.UNAUTHORIZED,
      ApiErrorMessage.Auth.INVALID_AUTHORIZATION_FORMAT
    );
  }

  const token = bearerHeader.replace("Bearer ", "");
  const user = jwt.verify(token, JWT_SECRET_KEY) as User;

  res.locals.user = user;
  return next();
}
