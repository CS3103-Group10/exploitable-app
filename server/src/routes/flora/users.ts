import jwt from "jsonwebtoken";
import { Router, Request, Response } from "express";

import { HttpStatusCode, JWT_SECRET_KEY } from "../../utils";
import { getDb } from "../../services/database";
import { ApiError, ApiErrorMessage } from "../../errors";
import { verifyJwt } from "../../middlewares";
import { User, Inventory } from "../../models";

const router: Router = Router();

// GET request - get all users
router.get("/", async (_: Request, res: Response) => {
  const { rows } = await getDb().query("SELECT * FROM Users;");

  return res.status(HttpStatusCode.OK).json(rows);
});

// GET request - get a single user via the provided token in auth headers
router.get("/via-token", verifyJwt, async (_: Request, res: Response) => {
  const user: User = res.locals.user;

  const { rows } = await getDb().query("SELECT * FROM Users where uid=$1;", [
    user.uid,
  ]);
  const queriedUser: User = rows[0];

  return res.status(HttpStatusCode.OK).json(queriedUser);
});

// POST request - user login (sql injectable)
router.post("/login", async (req: Request, res: Response) => {
  const uusername: string = req.body.uusername;
  const upassword: string = req.body.upassword;

  if (!uusername || !upassword) {
    throw new ApiError(
      HttpStatusCode.BAD_REQUEST,
      ApiErrorMessage.FloraLogin.MISSING_FIELDS
    );
  }

  const query =
    "SELECT uid, ucredits FROM Users where " +
    `uusername='${uusername}' and upassword='${upassword}'`;
  const { rows } = await getDb().query(query);
  const queriedUser: Pick<User, "uid" | "ucredits"> | undefined = rows[0];

  if (!queriedUser) {
    throw new ApiError(
      HttpStatusCode.NOT_FOUND,
      ApiErrorMessage.FloraLogin.USER_NOT_FOUND
    );
  }

  const user: User = { ...queriedUser, uusername, upassword };
  const token: string = jwt.sign(user, JWT_SECRET_KEY);

  return res.status(HttpStatusCode.OK).json({ token, user });
});

// GET request - get a user's inventory
router.get("/:id/inventory", verifyJwt, async (req: Request, res: Response) => {
  const user: User = res.locals.user;
  const uid: string = req.params.id;

  // make sure users can only retrieve their own inventory:
  if (user.uid.toString() !== uid) {
    throw new ApiError(
      HttpStatusCode.FORBIDDEN,
      ApiErrorMessage.Auth.AUTHENTICATION_FAILED
    );
  }

  const {
    rows,
  }: {
    rows: Inventory[];
  } = await getDb().query("SELECT * FROM Inventory WHERE uid=$1;", [uid]);

  return res.status(HttpStatusCode.OK).json(rows);
});

export default router;
