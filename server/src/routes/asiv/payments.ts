import { Router, Request, Response } from "express";

import { HttpStatusCode, AsivTransactionInfo, ASIV_API_KEY } from "../../utils";
import { ApiError, ApiErrorMessage } from "../../errors";
import { addNewTransaction } from "../../services/asiv";
import { getDb } from "../../services/database";
import { User } from "../../models";

const router: Router = Router();

// POST request - generate secure payment url
router.post("/request", async (req: Request, res: Response) => {
  const { API_KEY, pid, uid, pcost } = req.body;
  if (API_KEY !== ASIV_API_KEY) {
    throw new ApiError(
      HttpStatusCode.FORBIDDEN,
      ApiErrorMessage.AsivPayment.INVALID_API_KEY
    );
  }

  // invalid if any field is NOT an integer
  const hasInvalidFields = ![pid, uid, pcost].every(Number.isInteger);
  if (hasInvalidFields) {
    throw new ApiError(
      HttpStatusCode.BAD_REQUEST,
      ApiErrorMessage.AsivPayment.INVALID_REQUEST_FIELDS
    );
  }

  const {
    rows,
  } = await getDb().query("SELECT ucredits FROM Users where uid=$1;", [uid]);
  const queriedUser: Pick<User, "ucredits"> | undefined = rows[0];

  // user not found error:
  if (!queriedUser) {
    throw new ApiError(
      HttpStatusCode.NOT_FOUND,
      ApiErrorMessage.FloraLogin.USER_NOT_FOUND
    );
  }

  // user not enough credits error:
  if (queriedUser.ucredits < pcost) {
    throw new ApiError(
      HttpStatusCode.NOT_FOUND,
      ApiErrorMessage.AsivPayment.INSUFFICIENT_CREDITS
    );
  }

  const transactionInfo: AsivTransactionInfo = {
    uid: uid,
    pid: pid,
    pcost: pcost,
  };
  const tid: string = addNewTransaction(transactionInfo);

  return res
    .status(HttpStatusCode.OK)
    .json({ url: `http://localhost:8000/asiv/payments/${tid}` });
});

export default router;
