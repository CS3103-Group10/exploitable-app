import { Router, Request, Response } from "express";
import axios from "axios";

import {
  HttpStatusCode,
  FLORA_API_KEY,
  AsivTransactionInfo,
} from "../../utils";
import { ApiError, ApiErrorMessage } from "../../errors";
import { addNewTransaction } from "../../services/asiv";

const router: Router = Router();

// POST request - generate secure payment url
router.post("/request", async (req: Request, res: Response) => {
  const { API_KEY, pid, uid, pcost } = req.body;
  if (API_KEY !== FLORA_API_KEY) {
    throw new ApiError(
      HttpStatusCode.FORBIDDEN,
      ApiErrorMessage.AsivPayment.INVALID_API_KEY
    );
  }

  // invalid if any field is NOT an integer
  const hasInvalidFields = ![pid, uid, pcost].every(Number.isInteger);
  if (hasInvalidFields) {
    throw new ApiError(
      HttpStatusCode.BAD_REQUEST,
      ApiErrorMessage.AsivPayment.INVALID_REQUEST_FIELDS
    );
  }

  const transactionInfo: AsivTransactionInfo = {
    uid: parseInt(uid),
    pid: parseInt(pid),
    pcost: parseInt(pcost),
  };
  const tid: string = addNewTransaction(transactionInfo);

  return res
    .status(HttpStatusCode.OK)
    .json({ url: `http://localhost:8000/asiv/payments/${tid}` });
});

// POST request - secure payment request
router.post("/successful", async (req: Request, res: Response) => {
  const { API_KEY, pid, uid } = req.body;
  const newReqBody: any = req.body;
  newReqBody.API_KEY = FLORA_API_KEY;

  await axios({
    method: "post",
    url: "http://localhost:8000/flora/api/products/purchase/successful",
    data: newReqBody,
  });

  return res.status(HttpStatusCode.OK).send();
});

export default router;
